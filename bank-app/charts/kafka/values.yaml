replicaCount: 1

image:
  repository: apache/kafka
  tag: "4.0.0"
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  ports:
    - name: client
      port: 9092
    - name: controller
      port: 29093

ingress:
  enabled: false

autoscaling:
  enabled: false

env:
  CLUSTER_ID: "cluster-id"
  KAFKA_BROKER_ID: 1
  KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:29093"
  #  KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://bank-app-kafka:9092"
  #  KAFKA_CONTROLLER_QUORUM_VOTERS: "1@bank-app-kafka:29093"
  KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://bank-app-kafka:9092,CONTROLLER://localhost:29093"
  KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:29093"
  KAFKA_PROCESS_ROLES: "broker,controller"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
  KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"

livenessProbe:
  tcpSocket:
    port: 9092
  initialDelaySeconds: 60
  periodSeconds: 10

readinessProbe:
  tcpSocket:
    port: 9092
  initialDelaySeconds: 30
  periodSeconds: 10

serviceAccount:
  create: true
  name: ""1. Get the application URL by running these commands:
  {{- if .Values.ingress.enabled }}
  {{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
  {{- end }}
  {{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "kafka.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
  {{- else if contains "LoadBalancer" .Values.service.type }}
NOTE: It may take a few minutes for the LoadBalancer IP to be available.
  You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "kafka.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "kafka.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
  {{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "kafka.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
  {{- end }}